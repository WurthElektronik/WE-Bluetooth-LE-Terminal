import { BleDevice, ConnectionPriority } from "@capacitor-community/bluetooth-le";
import { BLEModuleType } from "../BLEModules/BLEModuleType";
import { GPIOPin } from "../BLEModules/GPIO/GPIOPin";
import { GeneralBLEModule } from "../BLEModules/GeneralBLEModule";
import { GPIO } from "../BLEModules/GPIO/GPIO";
import { GPIOInterface } from "../BLEModules/GPIO/GPIOInterface";

export class TestModule extends GeneralBLEModule implements GPIOInterface{

    private gpio:GPIO = undefined;

    constructor(bledevice:BleDevice){
        super(bledevice);
        this.gpio = new GPIO(
            new Map<number, GPIOPin>([
                [1,new GPIOPin(1,"Test Pin 1",false)],
                [2,new GPIOPin(2,"Test Pin 2",true)],
                [3,new GPIOPin(3,"Test Pin 3",true)],
                [4,new GPIOPin(4,"Test Pin 4",true)],
            ])
        );
        this.logInfo('Test Device Started');
        this.logInfo('Info Message Test');
        this.logRemoteCommand('GPIO Message Test');
        this.logDataSent('Data Sent Message Test');
        this.logDataReceived('Data Received Message Test');
        this.logDataReceived('Data Received Message Test With CRLF',undefined, Uint8Array.from([0x41,0x0D,0x0A,0x41]).buffer);
        this.logDataReceived('Long Data Received Message Test',undefined, Uint8Array.from([
            0x73, 0x6d, 0x6d, 0x77, 0x6f, 0x76, 0x7a, 0x76, 0x69, 0x68, 0x62, 0x6a, 0x72, 
            0x6b, 0x79, 0x7a, 0x6c, 0x73, 0x69, 0x76, 0x79, 0x78, 0x69, 0x6d, 0x6b, 0x65, 
            0x6b, 0x66, 0x64, 0x71, 0x70, 0x74, 0x6e, 0x72, 0x77, 0x6d, 0x76, 0x71, 0x6b, 
            0x6c, 0x70, 0x65, 0x62, 0x68, 0x62, 0x70, 0x6d, 0x69, 0x65, 0x74, 0x7a, 0x63, 
            0x74, 0x77, 0x73, 0x6f, 0x74, 0x74, 0x63, 0x64, 0x71, 0x78, 0x77, 0x76, 0x6b, 
            0x77, 0x6f, 0x67, 0x71, 0x62, 0x6e, 0x6d, 0x63, 0x6c, 0x73, 0x73, 0x72, 0x6d, 
            0x66, 0x78, 0x66, 0x6f, 0x64, 0x71, 0x6e, 0x63, 0x64, 0x75, 0x68, 0x62, 0x63, 
            0x67, 0x6c, 0x61, 0x79, 0x64, 0x70, 0x77, 0x6c, 0x72, 0x67, 0x61, 0x75, 0x61,
            0x73, 0x6d, 0x6d, 0x77, 0x6f, 0x76, 0x7a, 0x76, 0x69, 0x68, 0x62, 0x6a, 0x72, 
            0x6b, 0x79, 0x7a, 0x6c, 0x73, 0x69, 0x76, 0x79, 0x78, 0x69, 0x6d, 0x6b, 0x65, 
            0x6b, 0x66, 0x64, 0x71, 0x70, 0x74, 0x6e, 0x72, 0x77, 0x6d, 0x76, 0x71, 0x6b, 
            0x6c, 0x70, 0x65, 0x62, 0x68, 0x62, 0x70, 0x6d, 0x69, 0x65, 0x74, 0x7a, 0x63, 
            0x74, 0x77, 0x73, 0x6f, 0x74, 0x74, 0x63, 0x64, 0x71, 0x78, 0x77, 0x76, 0x6b, 
            0x77, 0x6f, 0x67, 0x71, 0x62, 0x6e, 0x6d, 0x63, 0x6c, 0x73, 0x73, 0x72, 0x6d, 
            0x66, 0x78, 0x66, 0x6f, 0x64, 0x71, 0x6e, 0x63, 0x64, 0x75, 0x68, 0x62, 0x63, 
            0x67, 0x6c, 0x61, 0x79, 0x64, 0x70, 0x77, 0x6c, 0x72, 0x67, 0x61, 0x75, 0x61,
        ]).buffer);
    }

    formatreadpinconfiguration(): DataView {
        this.gpio.getGPIOPins().get(1).setPinType(0);
        this.gpio.getGPIOPins().get(2).setPinType(1);
        this.gpio.getGPIOPins().get(3).setPinType(2);
        this.gpio.getGPIOPins().get(4).setPinType(3);
        this.gpio.resetTempGPIOPins(Array.from(this.gpio.getTempGPIOPins().values()));
        throw new Error("Method not implemented.");
    }

    formatwritepinconfiguration(pins: GPIOPin[]):DataView{
        throw new Error("Method not implemented.");
    };

    formatreadpinvalues(pins: GPIOPin[]): DataView {
        throw new Error("Method not implemented.");
    }

    formatwritepinvalues(pins: GPIOPin[]):DataView{
        throw new Error("Method not implemented.");
    }

    getType(): BLEModuleType {
        return undefined;
    }

    getGPIOSupport(): Boolean {
        return true;
    }

    getGPIO(): GPIO {
        return this.gpio;
    }

    getRemoteCommandSupport():Boolean{
        return this.getGPIOSupport();
    }

}
